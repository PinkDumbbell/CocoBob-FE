# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Development Deploy workflow

on:
  push:
    branches:
      - "develop"

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: development

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Check Node
      run: node -v
    
    - name: Install Dependencies
      run: npm install --frozen-lockfile
      
    - name: Generate Application Environment File
      env:
        VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
      run: |
        echo "VITE_API_BASE_URL: $VITE_API_BASE_URL" >> ./.env
        cat ./.env
      
    - name: Build
      run: npm run build
      
    - name: zip create
      run: zip -qq -r ./cocobob-fe-dev-build.zip .
      shell: bash
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        # name in repository settings
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Upload to S3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
        
      run:
        aws s3 cp --region ap-northeast-2 ./cocobob-fe-dev-build.zip s3://cocobob-storage/cocobob-deploy/cocobob-fe-dev-build.zip
        
    - name: Deploy
      run: aws deploy create-deployment
        --application-name cocobob-fe
        --deployment-config-name CodeDeployDefault.AllAtOnce
        --deployment-group-name cocobob-code-deploy
        --s3-location bucket=cocobob-storage,key=cocobob-deploy/cocobob-fe-dev-build.zip,bundleType=zip
